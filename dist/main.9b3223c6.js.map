{"version":3,"sources":["js/main.js"],"names":["result","document","querySelector","previousOperandText","currentOperandText","calcPad","ResultFontSize","parseFloat","defaultView","getComputedStyle","fontSize","PrevFontSize","InputFontSize","maxDigits","Calculator","currentOperand","previousOperand","operation","undefined","resulting","expression","showResult","checkWidthOverflow","place","fz","style","CurrentFontSize","clientWidth","innerText","clearAll","computePercent","x","eval","appendNumber","number","includes","length","toString","reverse","replace","chooseOperation","calculator","compute","computation","prev","current","isNaN","console","log","lastOperation","updateDisplay","setInterval","window","addEventListener","location","reload","event","key","match","eventValue","target","value","className","eventBGcolor","background","setTimeout"],"mappings":"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","file":"main.9b3223c6.js","sourceRoot":"..\\source","sourcesContent":["let result = document.querySelector('.calc-display--result'),\r\n    previousOperandText = document.querySelector('.calc-display--operation'),\r\n    currentOperandText = document.querySelector('.calc-display--input'),\r\n    calcPad = document.querySelector('.calc-pad');\r\n\r\nconst ResultFontSize = parseFloat(document.defaultView.getComputedStyle(result).fontSize);\r\nconst PrevFontSize = parseFloat(document.defaultView.getComputedStyle(previousOperandText).fontSize);\r\nconst InputFontSize = parseFloat(document.defaultView.getComputedStyle(currentOperandText).fontSize);\r\n\r\nconst maxDigits = 10;\r\n\r\n//#region Functions\r\nfunction Calculator(previousOperandText, currentOperandText, result) {\r\n    this.previousOperandText = previousOperandText;\r\n    this.currentOperandText = currentOperandText;\r\n    this.result = result;\r\n\r\n    this.currentOperand = '';\r\n    this.previousOperand = '';\r\n    this.operation = undefined;\r\n    this.resulting = '';\r\n    this.expression = '';\r\n\r\n    this.showResult = function () {\r\n        if (!this.currentOperand) return;\r\n        this.previousOperandText.innerText = `${this.expression}${this.currentOperand} `;\r\n        this.currentOperandText.innerText = '';\r\n        this.result.innerText = this.resulting;\r\n        this.currentOperand = '';\r\n\r\n        function checkWidthOverflow(place, fz) { // check overflow & make font smaller if needed\r\n            place.style.fontSize = fz + 'px';\r\n            let CurrentFontSize = fz;\r\n            while (calcPad.clientWidth*0.96 < place.clientWidth) {\r\n                CurrentFontSize--;\r\n                place.style.fontSize = CurrentFontSize + 'px';\r\n            }\r\n        } // end of checkWidthOverflow()\r\n\r\n        checkWidthOverflow(currentOperandText, InputFontSize);\r\n        checkWidthOverflow(previousOperandText, PrevFontSize);\r\n        checkWidthOverflow(result, ResultFontSize);\r\n    };\r\n\r\n    this.clearAll = function () {\r\n        this.currentOperand = '';\r\n        this.previousOperand = '';\r\n        this.operation = undefined;\r\n        this.resulting = '';\r\n    };\r\n\r\n    this.computePercent = function () {\r\n        if (!this.currentOperand) return;\r\n        this.previousOperandText.innerText = `${this.expression}${this.currentOperand}%`;\r\n        this.currentOperandText.innerText = '';\r\n        this.x = eval(\r\n            parseFloat(this.expression) +\r\n                this.operation +\r\n                (parseFloat(this.expression) / 100) *\r\n                    parseFloat(this.currentOperand)\r\n        );\r\n\r\n        this.result.innerText = this.x;\r\n        this.currentOperand = '';\r\n    };\r\n\r\n    this.appendNumber = function (number) {\r\n        this.resulting = '';\r\n        this.result.innerText = this.resulting;\r\n        if (number === '.' && this.currentOperand.includes('.')) return;\r\n        if (this.currentOperand === '0' && number === '0') return;\r\n        if (this.currentOperand.length <= maxDigits) {\r\n            if (number === '.' && !this.currentOperand) { this.currentOperand = '0' }\r\n            this.currentOperand += number.toString();\r\n        }\r\n    };\r\n\r\n    this.reverse = function () {\r\n        if (this.currentOperand.includes('-') ) {\r\n            this.currentOperand = this.currentOperand.replace(\"-\", \"\");\r\n        } else if (this.currentOperand) {\r\n            this.currentOperand = '-' + this.currentOperand;\r\n        };\r\n        this.currentOperandText.innerText = this.currentOperand;\r\n    }\r\n\r\n    this.chooseOperation = function (operation) {\r\n        if (this.previousOperand) calculator.compute();\r\n\r\n        if (result.innerText) {\r\n            this.previousOperand = result.innerText + operation;\r\n        } else {\r\n            this.previousOperand = this.currentOperand + operation;\r\n        }\r\n        this.operation = operation;\r\n        this.currentOperand = '';\r\n        this.expression = this.previousOperand;\r\n    };\r\n\r\n    this.compute = function () {\r\n        let computation;\r\n        const prev = parseFloat(this.previousOperand);\r\n        const current = parseFloat(this.currentOperand);\r\n        if (isNaN(prev) || isNaN(current)) return;\r\n\r\n        if (this.operation == '+') computation = prev + current;\r\n        if (this.operation == '-') computation = prev - current;\r\n        if (this.operation == 'ร') computation = prev * current;\r\n        if (this.operation == 'รท') computation = prev / current;\r\n\r\n        this.resulting = computation;\r\n        console.log(this.resulting);\r\n\r\n        this.operation = undefined;\r\n        this.previousOperand = '';\r\n        this.lastOperation = 0;\r\n    };\r\n\r\n    this.updateDisplay = function () {\r\n        this.currentOperandText.innerText = this.currentOperand;\r\n        this.previousOperandText.innerText = this.previousOperand;\r\n        this.result.innerText = this.resulting;\r\n    };\r\n}\r\n//#endregion\r\n\r\nsetInterval(() => {\r\n    if (!currentOperandText.innerText) currentOperandText.innerText = '0';   \r\n}, 66);\r\n\r\nwindow.addEventListener('resize', () => { location.reload() } ); // reload page on resize/rotate\r\n\r\nlet calculator = new Calculator( previousOperandText, currentOperandText, result );\r\n\r\n//#region Keyboard Listener\r\ndocument.addEventListener('keydown', event => { // keyboard listener\r\n    if (event.key == +event.key || event.key == '.' ) { // press digit or . button on keyboard\r\n        calculator.appendNumber( event.key );\r\n        calculator.updateDisplay();\r\n\r\n    } else if (event.key.match(/[\\*\\+/-]/)) { // press +-/* button on keyboard\r\n        calculator.chooseOperation(event.key);\r\n        calculator.updateDisplay();\r\n    \r\n    } else if (event.key == '=') { // press = button on keyboard\r\n        calculator.compute();\r\n        calculator.showResult();\r\n    \r\n    } else if (event.key == 'Escape') { // press ESC button on keyboard\r\n        calculator.clearAll();\r\n        calculator.updateDisplay();\r\n    }\r\n} ); \r\n//#endregion\r\n\r\n//#region (mouse) Clicks Listener\r\ncalcPad.addEventListener('click', event => { // mouse clicks listener\r\n    let eventValue = event.target.value;\r\n\r\n    if (event.target.className.includes('button')) { // changes BG color of pressed button for 99 ms\r\n        let eventBGcolor = event.target.style.background;\r\n        event.target.style.background = '#bbb';\r\n        setTimeout(() => event.target.style.background = eventBGcolor, 99);\r\n    } else return;\r\n\r\n    if (eventValue == +eventValue || eventValue == '.') { // click digit or .\r\n        calculator.appendNumber(eventValue);\r\n        calculator.updateDisplay();\r\n\r\n    } else if (event.target.className.includes('colorOper')) {  // click operation button\r\n        calculator.chooseOperation(eventValue);\r\n        calculator.updateDisplay();\r\n\r\n    } else if (eventValue == 'C') { // click C button\r\n        calculator.clearAll();\r\n        calculator.updateDisplay();\r\n\r\n    } else if (eventValue == '%') { // click % button\r\n        calculator.computePercent();\r\n        \r\n    } else if (eventValue == 'ยฑ') { // click Plus/minus button\r\n        calculator.reverse();\r\n        calculator.updateDisplay();\r\n\r\n    } else if (eventValue == '=') { // click = button\r\n        calculator.compute();\r\n        calculator.showResult();\r\n    }\r\n} );\r\n //#endregion"]}